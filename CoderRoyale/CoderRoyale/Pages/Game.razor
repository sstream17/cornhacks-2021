@page "/game"
@using Microsoft.AspNetCore.SignalR.Client
@using CoderRoyale.Hubs
@inject NavigationManager NavigationManager

@if (!Lobby.inLobby)
{
	<!--Checks if player is part of in progress game.-->
	@if (ConnectionIsInLobby())
	{
		<div class="round">
			<p>Round @currentRound</p>
		</div>

		<div class="timer">
			<p>@convertTime(secondsRemaining)</p>
		</div>

		<div class="players">
			<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
			<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
			<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
			<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
			<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
		</div>

		<div class="problemDescription">
			<p> THIS IS WHERE THE PROBLEM EXAMPLE WILL GO</p>
		</div>

		<div class="codeBlockContainer">
			<CodeBlock Id="@connection.ConnectionId"></CodeBlock>
		</div>

		<div class="d-flex justify-content-center">
			<ConsoleOutput @ref="yourOutput"></ConsoleOutput>

			<ConsoleOutput IsOpponents="true" @ref="opponentOutput"></ConsoleOutput>
		</div>

	}
	else
	{
		<h1>Sorry, a game is in progress!</h1>
	}
}
else
{
	<div class="lobby">
		<h1>CoderRoyal Lobby</h1>
		<h2>Current Players:</h2>
		<div class="playerList">
			@foreach (string player in players)
			{
				<p>@player</p>
			}
		</div>

		<!--Checks if player is not already part of lobby-->
		@if (!isInLobby())
		{
			<input @bind="usernameTextbox" />
			<button @onclick="JoinGame">Join</button>
		}
		else
		{
			<p>You're in, Press Start Game when everyones here!</p>
			<button @onclick="StartGame">Start Game</button>
		}
	</div>
}


@code {
	//TODO get from server
	private int secondsRemaining = 235;
	private int currentRound = 1;
	private HubConnection connection;
	private string usernameTextbox;
	private List<string> players = new List<string>();

	private ConsoleOutput yourOutput;
	private ConsoleOutput opponentOutput;

	// Converts seconds to 0:00 format
	private string convertTime(int seconds)
	{
		string minutesLeft = (seconds / 60).ToString();
		string secondsLeft = (seconds % 60).ToString("00");
		return minutesLeft + ":" + secondsLeft;
	}

	private void JoinGame()
	{
		string connectionId = connection.ConnectionId;
		Lobby.Players.Add(connectionId, usernameTextbox);
		connection.InvokeAsync("PlayerJoined");
	}

	private bool ConnectionIsInLobby()
	{
		foreach (string connectionId in Lobby.Players.Keys)
		{
			if (connectionId == connection.ConnectionId)
			{
				return true;
			}
		}
		return false;
	}

	//Disables lobby, invokes all players in lobby to change to game
	private void StartGame()
	{
		if (Lobby.Players.Keys.Count < 2)
		{
			return;
		}
		Lobby.inLobby = false;
		connection.InvokeAsync("StartGame");
	}

	private bool isInLobby()
	{
		foreach (string connectionId in Lobby.Players.Keys)
		{
			if (connection.ConnectionId == connectionId)
			{
				return true;
			}
		}
		return false;
	}

	// Returns string of all players in lobby
	private List<string> GetPlayerList()
	{
		List<string> players = new List<string>();
		foreach (string username in Lobby.Players.Values)
		{
			players.Add(username);
		}
		return players;
	}

	protected override async Task OnInitializedAsync()
	{
		connection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
			.Build();

		//Gets called when player clicks Start Game button
		connection.On<int>("StartGame", (int test) =>
		{
			StateHasChanged();
		});

		connection.On<int>("PlayerJoined", (int test) =>
		{
			players = GetPlayerList();
			StateHasChanged();
		});

		connection.On<string, int, string>("ReceiveExecutionResults",
		(submittedUser,
		timeSubmitted,
		output) =>
		{
			if (submittedUser.Equals(connection.ConnectionId))
			{
				yourOutput.AddMessage($"{timeSubmitted} {output}\n");
			}
			else
			{
				if (Lobby.Players.TryGetValue(submittedUser, out string userName))
				{
					opponentOutput.AddMessage($"{userName} {timeSubmitted} {output}\n");
				}
			}

			StateHasChanged();
		});

		//Loads current player list
		players = GetPlayerList();

		await connection.StartAsync();
	}
}
