@using Microsoft.AspNetCore.SignalR.Client

<div class="round">
	<p>Round @currentRound</p>
</div>

<div class="timer">
	<p>@convertTime(secondsRemaining)</p>
</div>

<div class="players">
	<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
	<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
	<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
	<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
	<img class="playerIcon" src="/img/test_image.png" height="50px" width="50px">
</div>

<div class="d-flex w-100 justify-content-around">
	<CodeBlock UserId="@Connection.ConnectionId" @ref="codeBlock"></CodeBlock>
	<div class="problem-description">
		@if (_problem != null)
		{
			@GetProblemDescription()
		}
	</div>
</div>

<div class="d-flex justify-content-center">
	<ConsoleOutput @ref="yourOutput"></ConsoleOutput>

	<ConsoleOutput IsOpponents="true" @ref="opponentOutput"></ConsoleOutput>
</div>

@code {
	[Parameter]
	public HubConnection Connection { get; set; }

	private int secondsRemaining = 235;
	private int currentRound;
	private Problem _problem;

	private CodeBlock codeBlock;
	private ConsoleOutput yourOutput;
	private ConsoleOutput opponentOutput;

	// Converts seconds to 0:00 format
	private string convertTime(int seconds)
	{
		string minutesLeft = (seconds / 60).ToString();
		string secondsLeft = (seconds % 60).ToString("00");
		return minutesLeft + ":" + secondsLeft;
	}

	protected override void OnInitialized()
	{
		Connection.On<string, int, string>("ReceiveExecutionResults",
			(submittedUser,
			timeSubmitted,
			output) =>
			{
				if (submittedUser.Equals(Connection.ConnectionId))
				{
					yourOutput.AddMessage($"{timeSubmitted} {output}\n");
				}
				else
				{
					if (Lobby.Players.TryGetValue(submittedUser, out string userName))
					{
						opponentOutput.AddMessage($"{userName} {timeSubmitted} {output}\n");
					}
				}

				StateHasChanged();
			});

		Connection.On<int, int, Problem>("ReceiveNextRound",
			(roundNumber,
			numberOfPlayersToAdvance,
			problem) =>
			{
				currentRound = roundNumber;
				_problem = problem;
				codeBlock.SetProblemInfo(_problem.ProblemId, _problem.InputVariables);
				StateHasChanged();
			});
	}

	private MarkupString GetProblemDescription()
	{
		return (MarkupString)_problem.Description;
	}
}
